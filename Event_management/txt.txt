const startdataEl = document.getElementById("startDate");
const enddataEl = document.getElementById("endDate");
const starttimeEl = document.getElementById("startTime");
const endtimeEl = document.getElementById("endTime");
const addprice = document.getElementById("Addprice");
const Addcategory = document.getElementById("Addcategory");
const tdata = document.getElementById("tdata");
const tdata2 = document.getElementById("tdata2");
console.log(tdata2);

function showtime() {
  const sdataEl = startdataEl.value;
  const edataEl = enddataEl.value;
  const stimeEl = starttimeEl.value;
  const etimeEl = endtimeEl.value;

  console.log(stimeEl);
  console.log(etimeEl);

  if (sdataEl && edataEl && stimeEl && etimeEl) {
    const trEl = document.createElement("tr");

    // Name input
    const tdName = document.createElement("td");
    const nameEl = document.createElement("input");
    nameEl.type = "text";
    nameEl.value = "";
    tdName.appendChild(nameEl);
    trEl.appendChild(tdName);
    var newnameEl = nameEl;

    // Start time input
    const tdStart = document.createElement("td");
    const startEl = document.createElement("input");
    startEl.type = "time";
    tdStart.appendChild(startEl);
    trEl.appendChild(tdStart);

    // End time input
    const tdEnd = document.createElement("td");
    const endEl = document.createElement("input");
    endEl.type = "time";
    tdEnd.appendChild(endEl);
    trEl.appendChild(tdEnd);

    // Remove button
    const tdBtn = document.createElement("td");
    const removeBtn = document.createElement("button");
    removeBtn.textContent = "Remove";
    removeBtn.onclick = function () {
      this.closest("tr").remove();
    };
    tdBtn.appendChild(removeBtn);
    trEl.appendChild(tdBtn);

    tdata.appendChild(trEl);

    const validate = () => {
      const newStart = startEl.value;
      const newEnd = endEl.value;
      console.log(newStart);
      console.log(newEnd);

      if (!newStart || !newEnd) return;

      // Check within allowed default range
      if (newStart < stimeEl) {
        alert(`Start time must be after ${stimeEl}`);
        startEl.value = "";
        return;
      }

      if (newEnd > etimeEl) {
        alert(`End time must be before ${etimeEl}`);
        endEl.value = "";
        return;
      }

      if (newStart >= newEnd) {
        alert("Start time must be before End time.");
        startEl.value = "";
        endEl.value = "";
        return;
      }

      // Overlap check with other rows
      const rows = tdata.querySelectorAll("tr");
      for (const row of rows) {
        if (row === trEl) continue;

        const inputs = row.querySelectorAll("input[type='time']");
        if (inputs.length < 2) continue;

        const exStart = inputs[0].value;
        const exEnd = inputs[1].value;

        if (!exStart || !exEnd) continue;

        if (newStart === exEnd) {
          alert("New start time cannot be equal to an existing end time.");
          startEl.value = "";
          endEl.value = "";
          return;
        }
        const overlap =
          (newStart >= exStart && newStart < exEnd) ||
          (newEnd > exStart && newEnd <= exEnd) ||
          (newStart <= exStart && newEnd >= exEnd);
        console.log(newStart);
        console.log(exStart);

        if (overlap) {
          alert("Time range overlaps with an existing entry.");
          startEl.value = "";
          endEl.value = "";
          return;
        }
      }
    };
    startEl.addEventListener("change", validate);
    endEl.addEventListener("change", validate);
  }
}

function ticketcategory() {
  const sdataEl = startdataEl.value;
  const edataEl = enddataEl.value;
  const stimeEl = starttimeEl.value;
  const etimeEl = endtimeEl.value;

  if (sdataEl && edataEl && stimeEl && etimeEl) {
    const tr2 = document.createElement("tr");
    // category Name
    const tdcateName = document.createElement("td");
    const cateNameEl = document.createElement("input");
    cateNameEl.type = "text";
    tdcateName.append(cateNameEl);
    tr2.append(tdcateName);
    //price
    const tdcateprice = document.createElement("td");
    const priceEl = document.createElement("input");
    priceEl.type = "text";
    tdcateprice.append(priceEl);
    tr2.append(tdcateprice);
    //count
    const tdcatecount = document.createElement("td");
    const countEl = document.createElement("input");
    countEl.type = "text";
    tdcatecount.append(countEl);
    tr2.append(tdcatecount);
    //Removebtn
    const tdcatebtn = document.createElement("td");
    const cateremoveBtn = document.createElement("button");
    cateremoveBtn.textContent = "Remove";
    cateremoveBtn.onclick = function () {
      this.closest("tr").remove();
    };
    tdcatebtn.append(cateremoveBtn);
    tr2.append(tdcatebtn);

    tdata2.appendChild(tr2);
  }
}

function pricingplans() {
  const sdataEl = startdataEl.value;
  const edataEl = enddataEl.value;
  if (sdataEl && edataEl && newnameEl) {
  }
}

// Trigger showtime row creation
// startdataEl.addEventListener("change", ticketcategory);
// enddataEl.addEventListener("change", ticketcategory);
// starttimeEl.addEventListener("change", ticketcategory);
// endtimeEl.addEventListener("change", ticketcategory);
Addcategory.addEventListener("click", ticketcategory);

// Trigger showtime row creation
// startdataEl.addEventListener("change", showtime);
// enddataEl.addEventListener("change", showtime);
// starttimeEl.addEventListener("change", showtime);
// endtimeEl.addEventListener("change", showtime);
addprice.addEventListener("click", showtime);




















































const startdataEl = document.getElementById("startDate");
const enddataEl = document.getElementById("endDate");
const starttimeEl = document.getElementById("startTime");
const endtimeEl = document.getElementById("endTime");
const addprice = document.getElementById("Addprice");
const Addcategory = document.getElementById("Addcategory");
const addpriceplan = document.getElementById("addpriceplan");
const tdata = document.getElementById("tdata");
const tdata2 = document.getElementById("tdata2");
const tdata3 = document.getElementById("tdata3");

function showtime() {
  const sdataEl = startdataEl.value;
  const edataEl = enddataEl.value;
  const stimeEl = starttimeEl.value;
  const etimeEl = endtimeEl.value;

  if (sdataEl && edataEl && stimeEl && etimeEl) {
    const trEl = document.createElement("tr");

    const tdName = document.createElement("td");
    const nameEl = document.createElement("input");
    nameEl.type = "text";
    tdName.appendChild(nameEl);
    trEl.appendChild(tdName);

    const tdStart = document.createElement("td");
    const startEl = document.createElement("input");
    startEl.type = "time";
    tdStart.appendChild(startEl);
    trEl.appendChild(tdStart);

    const tdEnd = document.createElement("td");
    const endEl = document.createElement("input");
    endEl.type = "time";
    tdEnd.appendChild(endEl);
    trEl.appendChild(tdEnd);

    const tdBtn = document.createElement("td");
    const removeBtn = document.createElement("button");
    removeBtn.textContent = "Remove";
    removeBtn.onclick = function () {
      this.closest("tr").remove();
      saveToLocalStorage()
    };
    tdBtn.appendChild(removeBtn);
    trEl.appendChild(tdBtn);

    tdata.appendChild(trEl);

    const validate = () => {
      const newStart = startEl.value;
      const newEnd = endEl.value;

      if (!newStart || !newEnd) return;

      if (newStart < stimeEl) {
        alert(`Start time must be after ${stimeEl}`);
        startEl.value = "";
        return;
      }

      if (newEnd > etimeEl) {
        alert(`End time must be before ${etimeEl}`);
        endEl.value = "";
        return;
      }

      if (newStart >= newEnd) {
        alert("Start time must be before End time.");
        startEl.value = "";
        endEl.value = "";
        return;
      }

      const rows = tdata.querySelectorAll("tr");
      for (const row of rows) {
        if (row === trEl) continue;
        const inputs = row.querySelectorAll("input[type='time']");
        // if (inputs.length < 2) continue;

        console.log("Row:", row);
        console.log("Time Inputs Found:", inputs.length, inputs);

        const exStart = inputs[0]?.value;
        const exEnd = inputs[1]?.value;

        // if (!exStart || !exEnd) continue;

        if (newStart === exEnd) {
          alert("New start time cannot be equal to an existing end time.");
          console.log("error");
          startEl.value = "";
          endEl.value = "";
          return;
        }

        const overlap =
          (newStart >= exStart && newStart < exEnd) ||
          (newEnd > exStart && newEnd <= exEnd) ||
          (newStart <= exStart && newEnd >= exEnd);

        if (overlap) {
          alert("Time range overlaps with an existing entry.");
          startEl.value = "";
          endEl.value = "";
          return;
        }
      }
    };
    startEl.addEventListener("change", validate);
    endEl.addEventListener("change", validate);
  }
  saveToLocalStorage();
}

function ticketcategory() {
  const sdataEl = startdataEl.value;
  const edataEl = enddataEl.value;
  const stimeEl = starttimeEl.value;
  const etimeEl = endtimeEl.value;

  if (sdataEl && edataEl && stimeEl && etimeEl) {
    const tr2 = document.createElement("tr");

    const tdcateName = document.createElement("td");
    const cateNameEl = document.createElement("input");
    cateNameEl.type = "text";
    tdcateName.append(cateNameEl);
    tr2.append(tdcateName);

    const tdcateprice = document.createElement("td");
    const priceEl = document.createElement("input");
    priceEl.type = "text";
    tdcateprice.append(priceEl);
    tr2.append(tdcateprice);

    const tdcatecount = document.createElement("td");
    const countEl = document.createElement("input");
    countEl.type = "text";
    tdcatecount.append(countEl);
    tr2.append(tdcatecount);

    const tdcatebtn = document.createElement("td");
    const cateremoveBtn = document.createElement("button");
    cateremoveBtn.textContent = "Remove";
    cateremoveBtn.onclick = function () {
      this.closest("tr").remove();
      saveToLocalStorage()
    };
    tdcatebtn.append(cateremoveBtn);
    tr2.append(tdcatebtn);

    tdata2.appendChild(tr2);
  }
  saveToLocalStorage();
}

Addcategory.addEventListener("click", ticketcategory);
addprice.addEventListener("click", showtime);
let i = 0;
function pricingplans() {
  const allNameInputs = document.querySelectorAll('#tdata input[type="text"]');
  const hasEmptyshow = Array.from(allNameInputs).some(
    (input) => input.value.trim() === ""
  );

  if (allNameInputs.length === 0 || hasEmptyshow) {
    alert("Please fill out all Name inputs before adding a pricing plan.");
    return;
  }

  const allticketinputs = document.querySelectorAll(
    "#tdata2 input[type='text']"
  );
  const hasEmptyticket = Array.from(allticketinputs).some(
    (input) => input.value.trim() === ""
  );
  if (allticketinputs.length === 0 || hasEmptyticket) {
    alert(
      "Please fill out all ticket categaory inputs before adding a pricing plan."
    );
    return;
  }
  console.log(allticketinputs);

  const tr3 = document.createElement("tr");

  const pricestartdatetdEl = document.createElement("td");
  const pricestartdatedivEl = document.createElement("div");
  const pricestartdateinput = document.createElement("input");
  pricestartdatedivEl.classList = "priceinput";
  pricestartdateinput.type = "date";
  pricestartdatedivEl.append(pricestartdateinput);
  pricestartdatetdEl.append(pricestartdatedivEl);
  tr3.append(pricestartdatetdEl);

  const priceenddatatdEl = document.createElement("td");
  const priceenddatedivEl = document.createElement("div");
  const priceenddateinput = document.createElement("input");
  priceenddatedivEl.classList = "priceinput";
  priceenddateinput.type = "date";
  priceenddatedivEl.append(priceenddateinput);
  priceenddatatdEl.append(priceenddatedivEl);
  tr3.append(priceenddatatdEl);

  const showtdEl = document.createElement("td");

  allNameInputs.forEach((el, index) => {
    const showdivEl = document.createElement("div");
    showdivEl.className = "show-ckeckbox";

    const showinputEl = document.createElement("input");
    showinputEl.type = "checkbox";
    showinputEl.id = `showtime${i}-${index}`;

    const showlabelEl = document.createElement("label");
    showlabelEl.htmlFor = `showtime${i}-${index}`;
    showlabelEl.innerText = el.value;

    showdivEl.appendChild(showinputEl);
    showdivEl.appendChild(showlabelEl);
    showtdEl.appendChild(showdivEl);
  });

  tr3.append(showtdEl);

  const ticketcategorytdEl = document.createElement("td");
  const ticketRows = tdata2.querySelectorAll("tr");

  ticketRows.forEach((row, index) => {
    const inputs = row.querySelectorAll("input[type='text']");
    if (inputs.length < 3) return;

    const categoryName = inputs[0].value;
    const categoryPrice = inputs[1].value;
    const categoryCount = inputs[2].value;

    const ticketmaindivEl = document.createElement("div");
    ticketmaindivEl.classList = "pricing-showtime";

    // First row: checkbox and label
    const ticketfirstdivEl = document.createElement("div");
    const ticketfirstinputEl = document.createElement("input");
    ticketfirstinputEl.type = "checkbox";
    const ticketlabelEl = document.createElement("label");
    ticketlabelEl.innerText = categoryName;

    ticketfirstdivEl.append(ticketfirstinputEl, ticketlabelEl);

    // Second row: show price and count in input fields
    const ticketseconddivEl = document.createElement("div");
    ticketseconddivEl.classList = "pricing-showtime-in";
    const ticketsecond1stinput = document.createElement("input");
    ticketsecond1stinput.type = "text";
    ticketsecond1stinput.value = categoryPrice;
    ticketsecond1stinput.placeholder = "Price";

    const ticketsecond2ndinput = document.createElement("input");
    ticketsecond2ndinput.type = "text";
    ticketsecond2ndinput.value = categoryCount;
    ticketsecond2ndinput.placeholder = "Count";

    ticketseconddivEl.append(ticketsecond1stinput, ticketsecond2ndinput);
    ticketmaindivEl.append(ticketfirstdivEl, ticketseconddivEl);

    // Append to table cell
    ticketcategorytdEl.append(ticketmaindivEl);
  });
  tr3.append(ticketcategorytdEl);
  //remove btn

  const removeTd = document.createElement("td");
  removeTd.innerHTML = `<button onclick="this.closest('tr').remove()" saveToLocalStorage() >Remove</button>`;
  tr3.appendChild(removeTd);

  tdata3.appendChild(tr3);
  i++;
  // validation on date------------------------------------
  const globalStart = startdataEl.value;
  const globalEnd = enddataEl.value;

  const validateDates = () => {
    const startVal = pricestartdateinput.value;
    const endVal = priceenddateinput.value;

    if (!startVal || !endVal) return;

    if (startVal > endVal) {
      alert("Start date cannot be after end date.");
      pricestartdateinput.value = "";
      priceenddateinput.value = "";
      return;
    }

    if (globalStart && startVal < globalStart) {
      alert(
        `Start date cannot be before the event start date (${globalStart})`
      );
      pricestartdateinput.value = "";
      return;
    }

    if (globalEnd && endVal > globalEnd) {
      alert(`End date cannot be after the event end date (${globalEnd})`);
      priceenddateinput.value = "";
      return;
    }

    const rows = tdata3.querySelectorAll("tr");
    for (const row of rows) {
      if (row === tr3) continue;
      const inputs = row.querySelectorAll("input[type='date']");
      // if (inputs.length < 2) continue;

      const exStart = inputs[0]?.value;
      const exEnd = inputs[1]?.value;

      // if (!exStart || !exEnd) continue;

      if (startVal === exEnd) {
        alert("New start date cannot be equal to an existing end date.");
        pricestartdateinput.value = "";
        priceenddateinput.value = "";
        return;
      }

      const overlap =
        (startVal >= exStart && startVal <= exEnd) ||
        (endVal >= exStart && endVal <= exEnd) ||
        (startVal <= exStart && endVal >= exEnd);

      if (overlap) {
        alert("Date range overlaps with an existing pricing plan.");
        pricestartdateinput.value = "";
        priceenddateinput.value = "";
        return;
      }
    }
  };

  pricestartdateinput.addEventListener("change", validateDates);
  priceenddateinput.addEventListener("change", validateDates);
  saveToLocalStorage();
}
addpriceplan.addEventListener("click", pricingplans);




function saveToLocalStorage() {
  const showtimes = [];
  tdata.querySelectorAll("tr").forEach((row) => {
    const inputs = row.querySelectorAll("input");
    if (inputs.length >= 3) {
      showtimes.push({
        name: inputs[0].value,
        start: inputs[1].value,
        end: inputs[2].value,
      });
    }
  });

  const categories = [];
  tdata2.querySelectorAll("tr").forEach((row) => {
    const inputs = row.querySelectorAll("input");
    if (inputs.length >= 3) {
      categories.push({
        name: inputs[0].value,
        price: inputs[1].value,
        count: inputs[2].value,
      });
    }
  });

  const pricingPlans = [];
  tdata3.querySelectorAll("tr").forEach((row) => {
    const dateInputs = row.querySelectorAll("input[type='date']");
    if (dateInputs.length >= 2) {
      const showLabels = Array.from(
        row.querySelectorAll("td:nth-child(3) label")
      ).map((el) => el.innerText);
      const ticketDivs = row.querySelectorAll(".pricing-showtime");
      const tickets = [];

      ticketDivs.forEach((div) => {
        const label = div.querySelector("label")?.innerText || "";
        const inputs = div.querySelectorAll("input[type='text']");
        if (inputs.length >= 2) {
          tickets.push({
            category: label,
            price: inputs[0].value,
            count: inputs[1].value,
          });
        }
      });

      pricingPlans.push({
        start: dateInputs[0].value,
        end: dateInputs[1].value,
        shows: showLabels,
        tickets,
      });
    }
  });

  const data = {
    showtimes,
    categories,
    pricingPlans,
    eventStartDate: startdataEl.value,
    eventEndDate: enddataEl.value,
    eventStartTime: starttimeEl.value,
    eventEndTime: endtimeEl.value,
  };

  localStorage.setItem("ticketData", JSON.stringify(data));
}

function loadFromLocalStorage() {
  const saved = localStorage.getItem("ticketData");
  if (!saved) return;

  const data = JSON.parse(saved);
  startdataEl.value = data.eventStartDate || "";
  enddataEl.value = data.eventEndDate || "";
  starttimeEl.value = data.eventStartTime || "";
  endtimeEl.value = data.eventEndTime || "";

  data.showtimes.forEach((show) => {
    startdataEl.value = data.eventStartDate;
    enddataEl.value = data.eventEndDate;
    starttimeEl.value = data.eventStartTime;
    endtimeEl.value = data.eventEndTime;
    showtime();
    const lastRow = tdata.lastElementChild;
    const inputs = lastRow.querySelectorAll("input");
    inputs[0].value = show.name;
    inputs[1].value = show.start;
    inputs[2].value = show.end;
  });

  data.categories.forEach((cat) => {
    ticketcategory();
    const lastRow = tdata2.lastElementChild;
    const inputs = lastRow.querySelectorAll("input");
    inputs[0].value = cat.name;
    inputs[1].value = cat.price;
    inputs[2].value = cat.count;
  });

  data.pricingPlans.forEach((plan) => {
    pricingplans();
    const lastRow = tdata3.lastElementChild;
    const dateInputs = lastRow.querySelectorAll("input[type='date']");
    dateInputs[0].value = plan.start;
    dateInputs[1].value = plan.end;

    const labels = lastRow.querySelectorAll("td:nth-child(3) label");
    labels.forEach((label) => {
      if (plan.shows.includes(label.innerText)) {
        const checkbox = label.previousElementSibling;
        checkbox.checked = false;
      }
    });

    const ticketDivs = lastRow.querySelectorAll(".pricing-showtime");
    ticketDivs.forEach((div) => {
      const category = div.querySelector("label").innerText;
      const ticket = plan.tickets.find((t) => t.category === category);
      if (ticket) {
        const inputs = div.querySelectorAll("input[type='text']");
        inputs[0].value = ticket.price;
        inputs[1].value = ticket.count;
      }
    });
  });
}
window.addEventListener("load", loadFromLocalStorage);





















const startdataEl = document.getElementById("startDate");
const enddataEl = document.getElementById("endDate");
const starttimeEl = document.getElementById("startTime");
const endtimeEl = document.getElementById("endTime");
const addprice = document.getElementById("Addprice");
const Addcategory = document.getElementById("Addcategory");
const addpriceplan = document.getElementById("addpriceplan");
const tdata = document.getElementById("tdata");
const tdata2 = document.getElementById("tdata2");
const tdata3 = document.getElementById("tdata3");

function showtime() {
  const sdataEl = startdataEl.value;
  const edataEl = enddataEl.value;
  const stimeEl = starttimeEl.value;
  const etimeEl = endtimeEl.value;

  if (sdataEl && edataEl && stimeEl && etimeEl) {
    const trEl = document.createElement("tr");

    const tdName = document.createElement("td");
    const nameEl = document.createElement("input");
    nameEl.type = "text";
    tdName.appendChild(nameEl);
    trEl.appendChild(tdName);

    const tdStart = document.createElement("td");
    const startEl = document.createElement("input");
    startEl.type = "time";
    tdStart.appendChild(startEl);
    trEl.appendChild(tdStart);

    const tdEnd = document.createElement("td");
    const endEl = document.createElement("input");
    endEl.type = "time";
    tdEnd.appendChild(endEl);
    trEl.appendChild(tdEnd);

    const tdBtn = document.createElement("td");
    const removeBtn = document.createElement("button");
    removeBtn.textContent = "Remove";
    removeBtn.onclick = function () {
      this.closest("tr").remove();
    };
    tdBtn.appendChild(removeBtn);
    trEl.appendChild(tdBtn);

    tdata.appendChild(trEl);

    const validate = () => {
      const newStart = startEl.value;
      const newEnd = endEl.value;

      if (!newStart || !newEnd) return;

      if (newStart < stimeEl) {
        alert(`Start time must be after ${stimeEl}`);
        startEl.value = "";
        return;
      }

      if (newEnd > etimeEl) {
        alert(`End time must be before ${etimeEl}`);
        endEl.value = "";
        return;
      }

      if (newStart >= newEnd) {
        alert("Start time must be before End time.");
        startEl.value = "";
        endEl.value = "";
        return;
      }

      const rows = tdata.querySelectorAll("tr");
      for (const row of rows) {
        if (row === trEl) continue;
        const inputs = row.querySelectorAll("input[type='time']");
        // if (inputs.length < 2) continue;

        console.log("Row:", row);
        console.log("Time Inputs Found:", inputs.length, inputs);

        const exStart = inputs[0]?.value;
        const exEnd = inputs[1]?.value;

        // if (!exStart || !exEnd) continue;

        if (newStart === exEnd) {
          alert("New start time cannot be equal to an existing end time.");
          console.log("error");
          startEl.value = "";
          endEl.value = "";
          return;
        }

        const overlap =
          (newStart >= exStart && newStart < exEnd) ||
          (newEnd > exStart && newEnd <= exEnd) ||
          (newStart <= exStart && newEnd >= exEnd);

        if (overlap) {
          alert("Time range overlaps with an existing entry.");
          startEl.value = "";
          endEl.value = "";
          return;
        }
      }
    };

    startEl.addEventListener("change", validate);
    endEl.addEventListener("change", validate);
  }
}

function ticketcategory() {
  const sdataEl = startdataEl.value;
  const edataEl = enddataEl.value;
  const stimeEl = starttimeEl.value;
  const etimeEl = endtimeEl.value;

  if (sdataEl && edataEl && stimeEl && etimeEl) {
    const tr2 = document.createElement("tr");

    const tdcateName = document.createElement("td");
    const cateNameEl = document.createElement("input");
    cateNameEl.type = "text";
    tdcateName.append(cateNameEl);
    tr2.append(tdcateName);

    const tdcateprice = document.createElement("td");
    const priceEl = document.createElement("input");
    priceEl.type = "text";
    tdcateprice.append(priceEl);
    tr2.append(tdcateprice);

    const tdcatecount = document.createElement("td");
    const countEl = document.createElement("input");
    countEl.type = "text";
    tdcatecount.append(countEl);
    tr2.append(tdcatecount);

    const tdcatebtn = document.createElement("td");
    const cateremoveBtn = document.createElement("button");
    cateremoveBtn.textContent = "Remove";
    cateremoveBtn.onclick = function () {
      this.closest("tr").remove();
    };
    tdcatebtn.append(cateremoveBtn);
    tr2.append(tdcatebtn);

    tdata2.appendChild(tr2);
  }
}

Addcategory.addEventListener("click", ticketcategory);
addprice.addEventListener("click", showtime);
let i=0;
function pricingplans() {
  const allNameInputs = document.querySelectorAll('#tdata input[type="text"]');
  const hasEmptyshow = Array.from(allNameInputs).some(
    (input) => input.value.trim() === ""
  );

  if (allNameInputs.length === 0 || hasEmptyshow) {
    alert("Please fill out all Name inputs before adding a pricing plan.");
    return;
  }

  const allticketinputs = document.querySelectorAll(
    "#tdata2 input[type='text']"
  );
  const hasEmptyticket = Array.from(allticketinputs).some(
    (input) => input.value.trim() === ""
  );
  if (allticketinputs.length === 0 || hasEmptyticket) {
    alert(
      "Please fill out all ticket categaory inputs before adding a pricing plan."
    );
    return;
  }
  console.log(allticketinputs);

  const tr3 = document.createElement("tr");

  const pricestartdatetdEl = document.createElement("td");
  const pricestartdatedivEl = document.createElement("div");
  const pricestartdateinput = document.createElement("input");
  pricestartdatedivEl.classList = "priceinput";
  pricestartdateinput.type = "date";
  pricestartdatedivEl.append(pricestartdateinput);
  pricestartdatetdEl.append(pricestartdatedivEl);
  tr3.append(pricestartdatetdEl);

  const priceenddatatdEl = document.createElement("td");
  const priceenddatedivEl = document.createElement("div");
  const priceenddateinput = document.createElement("input");
  priceenddatedivEl.classList = "priceinput";
  priceenddateinput.type = "date";
  priceenddatedivEl.append(priceenddateinput);
  priceenddatatdEl.append(priceenddatedivEl);
  tr3.append(priceenddatatdEl);

  const showtdEl = document.createElement("td");

  allNameInputs.forEach((el, index) => {
    const showdivEl = document.createElement("div");
    showdivEl.className = "show-ckeckbox";

    const showinputEl = document.createElement("input");
    showinputEl.type = "checkbox";
    showinputEl.id = `showtime${i}-${index}`;

    const showlabelEl = document.createElement("label");
    showlabelEl.htmlFor = `showtime${i}-${index}`;
    showlabelEl.innerText = el.value;

    showdivEl.appendChild(showinputEl);
    showdivEl.appendChild(showlabelEl);
    showtdEl.appendChild(showdivEl);
  });
  
  tr3.append(showtdEl);

  const ticketcategorytdEl = document.createElement("td");
  const ticketRows = tdata2.querySelectorAll("tr");

  ticketRows.forEach((row, index) => {
    const inputs = row.querySelectorAll("input[type='text']");
    if (inputs.length < 3) return;

    const categoryName = inputs[0].value;
    const categoryPrice = inputs[1].value;
    const categoryCount = inputs[2].value;

    const ticketmaindivEl = document.createElement("div");
    ticketmaindivEl.classList = "pricing-showtime";

    // First row: checkbox and label
    const ticketfirstdivEl = document.createElement("div");
    const ticketfirstinputEl = document.createElement("input");
    ticketfirstinputEl.type = "checkbox";
    const ticketlabelEl = document.createElement("label");
    ticketlabelEl.innerText = categoryName;

    ticketfirstdivEl.append(ticketfirstinputEl, ticketlabelEl);

    // Second row: show price and count in input fields
    const ticketseconddivEl = document.createElement("div");
    ticketseconddivEl.classList = "pricing-showtime-in";
    const ticketsecond1stinput = document.createElement("input");
    ticketsecond1stinput.type = "text";
    ticketsecond1stinput.value = categoryPrice;
    ticketsecond1stinput.placeholder = "Price";

    const ticketsecond2ndinput = document.createElement("input");
    ticketsecond2ndinput.type = "text";
    ticketsecond2ndinput.value = categoryCount;
    ticketsecond2ndinput.placeholder = "Count";

    ticketseconddivEl.append(ticketsecond1stinput, ticketsecond2ndinput);
    ticketmaindivEl.append(ticketfirstdivEl, ticketseconddivEl);

    // Append to table cell
    ticketcategorytdEl.append(ticketmaindivEl);
  });
  tr3.append(ticketcategorytdEl);
  //remove btn

  const removeTd = document.createElement("td");
  removeTd.innerHTML = `<button onclick="this.closest('tr').remove()">Remove</button>`;
  tr3.appendChild(removeTd);

  tdata3.appendChild(tr3);
 i++
  // validation on date------------------------------------
  const globalStart = startdataEl.value;
  const globalEnd = enddataEl.value;

  const validateDates = () => {
    const startVal = pricestartdateinput.value;
    const endVal = priceenddateinput.value;

    if (!startVal || !endVal) return;

    if (startVal > endVal) {
      alert("Start date cannot be after end date.");
      pricestartdateinput.value = "";
      priceenddateinput.value = "";
      return;
    }

    if (globalStart && startVal < globalStart) {
      alert(
        `Start date cannot be before the event start date (${globalStart})`
      );
      pricestartdateinput.value = "";
      return;
    }

    if (globalEnd && endVal > globalEnd) {
      alert(`End date cannot be after the event end date (${globalEnd})`);
      priceenddateinput.value = "";
      return;
    }

    const rows = tdata3.querySelectorAll("tr");
    for (const row of rows) {
      if (row === tr3) continue;
      const inputs = row.querySelectorAll("input[type='date']");
      // if (inputs.length < 2) continue;

      const exStart = inputs[0]?.value;
      const exEnd = inputs[1]?.value;

      // if (!exStart || !exEnd) continue;

      if (startVal === exEnd) {
        alert("New start date cannot be equal to an existing end date.");
        pricestartdateinput.value = "";
        priceenddateinput.value = "";
        return;
      }

      const overlap =
        (startVal >= exStart && startVal <= exEnd) ||
        (endVal >= exStart && endVal <= exEnd) ||
        (startVal <= exStart && endVal >= exEnd);

      if (overlap) {
        alert("Date range overlaps with an existing pricing plan.");
        pricestartdateinput.value = "";
        priceenddateinput.value = "";
        return;
      }
    }
  };

  pricestartdateinput.addEventListener("change", validateDates);
  priceenddateinput.addEventListener("change", validateDates);
 
}
addpriceplan.addEventListener("click", pricingplans);
